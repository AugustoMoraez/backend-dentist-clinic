generator client {
  provider = "prisma-client-js"
}

enum crdb_internal_region {
  gcp_southamerica_east1 @map("gcp-southamerica-east1")
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:1234@localhost:3306/nest"
}

model Address {
  id           String  @id @default(uuid())
  house_number String?
  street       String?
  district     String?
  city         String?
  state        String?
  complement   String?

  user_id String     @unique
  user    User @relation(fields: [user_id], references: [id])
}

enum Subs_Status {
  NULL
  ACTIVE
  PEDING
  DISABLED
}
enum Plan {
  BASIC
  PRO
  PREMIUM
  NULL
}

model Signature{
  id                String   @id @default(uuid())
  name              String
  price             Float
  stripeProductId   String?   
  stripePriceId     String?  
  userID            String
  client            User   @relation(fields: [userID], references: [id])
  createdAt         DateTime @default(now())
}

model User {
  //personal data
  id           String  @id @unique @default(uuid())
  email        String  @unique
  password     String
  name         String?
  cnpj         String? @unique
  cpf          String? @unique
  contact_1    String
  contact_2    String?
  address      Address?
  AccountVerification Boolean @default(false)
  
  //stripe
  subscription_Status Subs_Status @default(NULL)
  plan Plan @default(NULL)
  subscription_id String?
  currentPeriodEnd  DateTime?
  stripe_id    String?
  stripe_connect_id   String?
  
  //timestamp
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  

  Customer Customer[]
  Signature Signature[]
}
model Customer {
  id                String   @id @default(cuid())
  name              String
  email             String
  cpf               String
  phone             String?
  stripeCustomerId  String  
  user              User     @relation(fields: [userID], references: [id])
  userID            String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([cpf, userID])
  @@unique([email, userID])  
  @@index([userID])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  email     String   @unique 
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model AccountVerifyToken {
  id        String   @id @default(uuid())
  token     String   @unique
  email     String   @unique 
  expiresAt DateTime
  createdAt DateTime @default(now())
}


